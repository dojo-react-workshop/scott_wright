{"version":3,"sources":["../src/cards.js"],"names":["DeckClass","deck","suits","name","short","faces","value","imagePath","new","length","forEach","suit","face","push","image","shuffle","newIndex","tempCard","card","index","Math","floor","random","showCards","console","log","cardCount","deal","howMany","delt","i","shift"],"mappings":"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","file":"cards.js","sourcesContent":["// const Math = require('math')\r\n\r\n//deck class constructor\r\nfunction DeckClass(){\r\n    //private\r\n    const deck = []\r\n    const suits = [\r\n        {name: 'Clubs', short: 'c'},\r\n        {name: 'Diamonds', short: 'd'},\r\n        {name: 'Hearts', short: 'h'},\r\n        {name: 'Spades', short: 's'}\r\n    ]\r\n    const faces = [\r\n        {name: 'Ace', short: '1', value: -1}, //we'll treat a value of -1 as a 1 or 11\r\n        {name: '2', short:'2', value: 2},\r\n        {name: '3', short:'3', value: 3},\r\n        {name: '4', short:'4', value: 4},\r\n        {name: '5', short:'5', value: 5},\r\n        {name: '6', short:'6', value: 6},\r\n        {name: '7', short:'7', value: 7},\r\n        {name: '8', short:'8', value: 8},\r\n        {name: '9', short:'9', value: 9},\r\n        {name: '10', short:'10', value: 10},\r\n        {name: 'Jack', short:'j', value: 10},\r\n        {name: 'Queen', short:'q', value: 10},\r\n        {name: 'King', short:'k', value: 10},\r\n\r\n    ]\r\n\r\n    //public\r\n    this.imagePath = ''\r\n    this.new = function(){\r\n        //loads the deck array with cards\r\n        //empty the deck\r\n        deck.length = 0\r\n\r\n        //populate deck\r\n        suits.forEach((suit)=>{\r\n            faces.forEach((face)=>{\r\n                deck.push(\r\n                    {\r\n                        name: `${face.name} of ${suit.name}`,\r\n                        image: `${this.imagePath}/${suit.short}${face.short}.png`,\r\n                        value: face.value\r\n                    }\r\n                )\r\n            })\r\n        })\r\n    }\r\n    this.shuffle = function(){\r\n        //shuffle the deck by moving each card to a random spot\r\n        let newIndex = 0\r\n        let tempCard = {}\r\n        deck.forEach((card,index)=>{\r\n            //pick a random location and swap the cards\r\n            newIndex = Math.floor((Math.random() * deck.length))\r\n            tempCard = deck[newIndex]\r\n            deck[newIndex] = card\r\n            deck[index]=tempCard\r\n        })\r\n    }\r\n    this.showCards = function(){\r\n        //log the cards in the deck to console for troubleshooting\r\n        deck.forEach((card)=>{\r\n            console.log(card)\r\n        })\r\n    }\r\n    this.cardCount = function(){\r\n        //return the number of cards in the deck\r\n        return deck.length\r\n    }\r\n    this.deal = function(howMany=1){\r\n        //remove the top cards on the deck and return an array of cards removed\r\n        let delt=[]\r\n        for (let i = 1; i<=howMany; i++){\r\n            if (deck.length > 0){\r\n                delt.push(deck.shift())\r\n            } else {\r\n                break // no cards left\r\n            }\r\n        }\r\n        return delt\r\n    }\r\n}\r\n\r\n// module.exports = new DeckClass\r\n\r\n// let myDeck = new DeckClass('./images')\r\n// myDeck.new()\r\n// myDeck.shuffle()\r\n// myDeck.showCards()\r\n// console.log(myDeck.deal(5))\r\n// console.log(myDeck.cardCount())"]}