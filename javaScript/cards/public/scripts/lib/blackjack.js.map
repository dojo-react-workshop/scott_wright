{"version":3,"sources":["../src/blackjack.js"],"names":["BlackJack","deck","DeckClass","gameOn","imagePath","getScore","cards","total","aceCount","forEach","card","value","i","playerCards","dealerCards","gameResult","retString","newGame","length","new","shuffle","deal","push","getDealerHand","hand","score","getPlayerHand","dealerTurn","playerTurn"],"mappings":"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","file":"blackjack.js","sourcesContent":["//blackjack game\r\n//const path = require('path')\r\n//get a deck of cards\r\n\r\nfunction BlackJack(){\r\n    //private deck of cards\r\n    //const deck = require (path.join(__dirname + '/cards.js'))\r\n    let deck = new DeckClass\r\n    let gameOn = true\r\n    deck.imagePath = './images'\r\n    function getScore(cards){\r\n        //returns the value of a given set of cards\r\n        let total = 0\r\n        let aceCount = 0 \r\n        cards.forEach((card)=>{\r\n            if (card.value == -1){\r\n                //track aces to see how to treat tham at the end\r\n                aceCount ++\r\n            } else {\r\n                total += card.value\r\n            }\r\n        })\r\n        for (let i = 1; i <= aceCount; i++){\r\n            //if there were any aces in the hand..\r\n            if (total > 10){\r\n                total+=1\r\n            } else {\r\n                total+=11\r\n            }\r\n        }\r\n        \r\n        return total\r\n    }\r\n\r\n    //hands of cards for the players\r\n    let playerCards=[]\r\n    let dealerCards=[]\r\n\r\n    //share the status of the game\r\n    this.gameOn = function(){\r\n        return gameOn\r\n    }\r\n    this.gameResult = function(){\r\n        if(gameOn){\r\n            return \"Player's turn.\"\r\n        } else {\r\n            let retString = ``\r\n            if (getScore(playerCards) > 21){\r\n                //player bust\r\n                return 'Player bust, dealer wins!'\r\n            } else if (getScore(dealerCards) > 21){\r\n                //player bust\r\n                return 'Dealer bust, player wins!'\r\n            } else if (getScore(playerCards) == getScore(dealerCards)){\r\n                //draw\r\n                return 'Push!'\r\n            } else if (getScore(playerCards) == 21){\r\n                //player black jack\r\n                return 'Black Jack - Player wins!'\r\n            } else if (getScore(dealerCards) == 21){\r\n                //dealer black jack\r\n                return 'Black Jack - Dealer wins!'\r\n            } else if (getScore(playerCards) > getScore(dealerCards)){\r\n                //player wins\r\n                return 'Player wins!'\r\n            } else if (getScore(playerCards) < getScore(dealerCards)) {\r\n                //dealer wins\r\n                return 'Dealer wins!'\r\n            } \r\n        }\r\n    }\r\n    this.newGame = function(){\r\n        //start a new game\r\n        //clear empty the hands\r\n        playerCards.length = 0\r\n        dealerCards.length = 0\r\n\r\n        //reset the deck of cards\r\n        deck.new()\r\n        deck.shuffle()\r\n\r\n        //dealer takes 2 cards\r\n        deck.deal(2).forEach((card)=>{\r\n            dealerCards.push(card)\r\n        })\r\n\r\n        //player takes 2 cards\r\n        deck.deal(2).forEach((card)=>{\r\n            playerCards.push(card)\r\n        })\r\n\r\n        //check if someone already has black jack\r\n        if (getScore(dealerCards) == 21 || getScore(playerCards) == 21){\r\n            gameOn = false\r\n        }\r\n    }\r\n    this.getDealerHand = function(){\r\n        let hand = {}\r\n        hand.cards=dealerCards\r\n        hand.score=getScore(dealerCards)\r\n        return hand\r\n    }\r\n    this.getPlayerHand = function(){\r\n        let hand = {}\r\n        hand.cards=playerCards\r\n        hand.score=getScore(playerCards)\r\n        return hand\r\n    }\r\n    this.dealerTurn = function(){\r\n        if (!gameOn){\r\n            return false\r\n        }\r\n        while (getScore(dealerCards) < 17){\r\n            //dealer will take a card\r\n            deck.deal(1).forEach((card)=>{\r\n                dealerCards.push(card)\r\n            })\r\n        }        \r\n        //game is always over after dealers turn\r\n        gameOn = false\r\n        return true\r\n    }\r\n    this.playerTurn = function(){\r\n        if (!gameOn){\r\n            return false\r\n        }\r\n        //player will take a card\r\n        deck.deal(1).forEach((card)=>{\r\n            playerCards.push(card)\r\n        })        \r\n        if (getScore(playerCards) >= 21){\r\n            //game over\r\n            gameOn = false\r\n        }\r\n        return true\r\n    }\r\n}\r\n\r\n"]}